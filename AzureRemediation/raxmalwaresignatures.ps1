<#
    .SYNOPSIS
    Updates the Anti-Virus and Anti-Malware definitions for Azure Smart Tickets.
       
    .DESCRIPTION
    Checks the version of OS and automatically downloads and installs the latest anti-virus and anti-malware definitions.

    Supported: Yes
    Keywords: azure,malware,signatures,smarttickets
    Prerequisites: No
    Makes changes: Yes

    .EXAMPLE
    Full command:  .\raxmalwaresignatures.ps1
    Description: Executes the script without user input required and attempts to updates the anti-virus and anti-malware definitions.
       
    .OUTPUTS
    Example output:
 
    Hello Team,

    As Microsoft Antimalware Engine/Windows Defender signature definitions were outdated; our Smart Ticket engine has downloaded and updated the Anti-Spyware and Anti-Virus components automatically:

    Outdated Version
    ------------------------------------------------------------
    Anti-spyware version : 1.251.170.0
    Anti-virus version   : 1.251.170.0
    ------------------------------------------------------------

    Updated Version
    ------------------------------------------------------------
    Anti-spyware version : 1.263.265.0
    Anti-virus version   : 1.263.265.0
    Last Updated         : 03/07/2018 09:01:11
    ------------------------------------------------------------

    Please feel free to update this ticket if you have any questions.

    Kind regards,

    Microsoft Azure Engineer
    Rackspace Toll Free: (800) 961-4454

        
    .NOTES
    Minimum OS: 2012 
    Minimum PoSh: 4.0

    Version Table:
    Version :: Author             :: Live Date   :: JIRA     :: QC          :: Description
    -----------------------------------------------------------------------------------------------------------
    1.0     :: Oliver Hurn        :: XX-FEB-2017 :: XX-XXX   :: Chris Clark :: Release
    1.1     :: Oliver Hurn        :: XX-FEB-2017 :: XX-XXX   :: Bob Larkin  :: Optimisation and signature added

#>

    #Script Uri
    Param(
    [Parameter(Mandatory=$false)]$PayloadUri
    )

Function Update-AzureSignatures
{
    Try
    {

    #uncomment for testing
    #$object = ConvertFrom-Json "$(get-content -Path C:\rs-pkgs\signaturepayload.json)"

    #Ingest the payload
    $object = Invoke-RestMethod -Uri $PayloadUri

    #Ticket Signature
    $ticketSignature = "Kind regards,`n`nSmart Ticket Automation`nRackspace Toll Free (US): 1800 961 4454`n                    (UK): 0800 032 1667"

    #Saves the original Anti-Spyware/Virus version to a variable, to be cross-referenced later in the if statement (ingested from payload)
    $OriginalAsVersion = $object.SignatureVersion
    $OriginalAvVersion = $object.SignatureVersion

    #Function to return the Anti-Spyware version
    Function Get-SpywareVersion
    {
    <#
    .SYNOPSIS
    Gets the Anti-Malware version for Microsoft's SCEP Engine or Windows Defender.  
    #>
    Try
        {
        #Set path to use for Import-Module command
        $path = 'C:\Program Files\Microsoft Security Client\MpProvider\MpProvider.psd1'
        $osVersion = ([environment]::OSVersion.Version).Major
        
        #Check if OS is Windows 2016 
        if ($osVersion -gt '6')
            {
                #Gets anti-spyware version on Windows 2016 and stores it in variable 
                $AntispywareVersion = (Get-MpComputerStatus).AntispywareSignatureVersion
            }
        else
            {
                if ((Test-Path -Path $path) -eq 'True')
                    {
                        Import-Module $path
                        #Gets anti-spyware version on Windows 2012 and stores it in variable
                        $AntispywareVersion = (Get-MprotComputerStatus).AntispywareSignatureVersion    
                    }
            }
            return $AntispywareVersion
        }
    Catch
        {
            #Information to be added to private comment in ticket when unknown error occurs
            $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
            Write-Output $ErrMsg

        }
    }

    #Function to return the Anti-Virus version
    Function Get-AntiVirusVersion
    {
    <#
    .SYNOPSIS
    Gets the Anti-Virus version for Microsoft's SCEP Engine or Windows Defender. 
    #>
    Try
        {
        #Set path to use for Import-Module command
        $path = 'C:\Program Files\Microsoft Security Client\MpProvider\MpProvider.psd1'
        $osVersion = ([environment]::OSVersion.Version).Major
         
        if ($osVersion -gt '6')
            {
                #Gets Anti-Virus version on Windows 2016 and stores it in variable
                $AntivirusVersion = (Get-MpComputerStatus).AntivirusSignatureVersion
                [DateTIme]$script:CurrrentDateTime = (Get-MpComputerStatus).AntivirusSignatureLastUpdated  
            }
        else
            {
                if ((Test-Path -Path $path) -eq 'True')
                    {
                        Import-Module $path
                        #Gets Anti-Virus version on Windows 2012 and stores it in variable
                        $AntivirusVersion = (Get-MprotComputerStatus).AntivirusSignatureVersion
                       [DateTIme]$script:CurrrentDateTime = (Get-MprotComputerStatus).AntivirusSignatureLastUpdated      
                    }
            }
            return $AntivirusVersion
            
        }
    Catch
        {
            #Information to be added to private comment in ticket when unknown error occurs
            $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
            Write-Output $ErrMsg

        }
    }

    #Function to update the download and automatically install definitions 
    Function Update-MalwareVersion      
    {
    <#
    .SYNOPSIS
    Performs an update for Microsoft's AntiMalware Engine or Windows Defender.
    #>
    Try
        {
        $osVersion = ([environment]::OSVersion.Version).Major
        $path = 'C:\Program Files\Microsoft Security Client\MpProvider\MpProvider.psd1' 

        if ($osVersion -gt '6')
            {
                #Updates Windows Defender on Windows 2016
                Update-MpSignature -ErrorAction SilentlyContinue 
            }
        else
            {
                #Import Module for 2012
                Import-Module $path
                #Updates SCEP on Windows 2012
                Update-MprotSignature -ErrorAction SilentlyContinue     
            }

        }
    Catch
        {
            #Information to be added to private comment in ticket when unknown error occurs
            $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
            Write-Output $ErrMsg
        }
    }

    #Calls the function to perform the update during Smart Ticket Remediation
    Update-MalwareVersion

    #Saves the Anti-Spyware version to a variable after an update as been attempted
    $CurrentAsVersion = Get-SpywareVersion

    #Saves the Anti-Virus version to a variable after an update as been attempted
    $CurrentAvVersion = Get-AntiVirusVersion
 

    #Ticket update Logic: If the Anti-Virus or Ant-Malware Version has increased since the update attempt...
    If ($CurrentAsVersion -gt $OriginalAsVersion -or $CurrentAvVersion -gt $OriginalAvVersion)
        {
            #Output variable for a successful update. Action publicly updates ticket, confirms version change and closes ticket
            $Output1 = $null
            $Output1 += "[TICKET_UPDATE=PUBLIC]`n"
            $Output1 += "[TICKET_STATUS=CONFIRM SOLVED]`n"
            $Output1 += "Hello Team,`n`nAs Microsoft Antimalware Engine/Windows Defender signature definitions were outdated; our Smart Ticket engine has downloaded and updated the Anti-Spyware and Anti-Virus components automatically:"
            $Output1 += "`n`nOutdated Version`n------------------------------------------------------------`n"
            $Output1 += "Anti-spyware version : $($OriginalAsVersion)`n"
            $Output1 += "Anti-virus version   : $($OriginalAvVersion)"
            $Output1 += "`n------------------------------------------------------------`n"
            $Output1 += "`n`Updated Version`n------------------------------------------------------------`n"
            $Output1 += "Anti-spyware version : $($CurrentAsVersion)`n"
            $Output1 += "Anti-virus version   : $($CurrentAvVersion)`n"
            $Output1 += "Last Updated         : $($CurrrentDateTime)"
            $Output1 += "`n------------------------------------------------------------`n`n"
            $Output1 += "Please feel free to update this ticket if you have any questions.`n`n"
            $Output1 += "$($ticketSignature)"          
          
            #Successful Ticket update
            $Output1
        }
    else
        {
            #Output variable for a failed update. Action updates ticket, confirms version hasn't changed after the update being performed, private updates ticket with manual remediation steps
            $Output2 = $null
            $Output2 += "[TICKET_UPDATE=PRIVATE]`n"
            $Output2 += "[TICKET_STATUS=ALERT RECEIVED]`n"
            $Output2 += "Hello Team,`n`nAs Microsoft Antimalware Engine/Windows Defender signature definitions were outdated; our Smart Ticket engine tried to download and update the Anti-Spyware and Anti-Virus components automatically, but the versions have NOT been updated:"
            $Output2 += "`n`nOriginal Version`n------------------------------------------------------------`n"
            $Output2 += "Anti-spyware version : $($OriginalAsVersion)`n"
            $Output2 += "Anti-virus version   : $($OriginalAvVersion)"
            $Output2 += "`n------------------------------------------------------------`n"
            $Output2 += "`n`Updated Version`n------------------------------------------------------------`n"
            $Output2 += "Anti-spyware version : $($CurrentAsVersion)`n"
            $Output2 += "Anti-virus version   : $($CurrentAvVersion)`n"
            $Output2 += "Last Updated         : $($CurrrentDateTime)"
            $Output2 += "`n------------------------------------------------------------`n`n"
            $Output2 += "Please login to the VM and Try to remediate manually.`n`n"
            $Output2 += "Update Definitions:`n------------------------------------------------------------`nWindows 2012:`n Import-Module 'C:\Program Files\Microsoft Security Client\MpProvider\MpProvider.psd1'`n Update-MprotSignature`n Get-MprotComputerStatus | Select-Object AntispywareEnabled, AntispywareSignatureVersion, AntispywareSignatureLastUpdated, AntivirusEnabled, AntivirusSignatureVersion, AntivirusSignatureLastUpdated`n`n"
            $Output2 += "Windows 2016:`n Update-MpSignature`n Get-MpComputerStatus | Select-Object AntispywareEnabled, AntispywareSignatureVersion, AntispywareSignatureLastUpdated, AntivirusEnabled, AntivirusSignatureVersion, AntivirusSignatureLastUpdated`n`n"
            $Output2 += "$($ticketSignature)"
            
            #Failed Ticket Update
            $Output2
        }
    }
    Catch
    {
        #Error handling Output
        $Output3 = $null
        $Output3 += "[TICKET_UPDATE=PRIVATE]`n"
        $Output3 += "[TICKET_STATUS=ALERT RECEIVED]`n"
        $Output3 += "Smart Ticket Script: raxmalwaresignatures.ps1 failed to run, or Microsoft Antimalware Engine is not installed."

        #Failed Script Output
        $Output3
    }
}

#Run Function
Update-AzureSignatures