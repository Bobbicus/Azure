<#
    .SYNOPSIS
    Real time protection is temporarily disabled during update to the engine. This script will verify if enabled, if so close ticket. 
    If remediation is enabled, it will attempt to enabled protection then check status. If remediation fails passes ticket to support.
       
    .DESCRIPTION
    Full description: Script verifies if real time protection is enabled, if remediation is selected will set and verify.
    supported: Yes
    keywords: Malware ,Windows Defender, Virus Protection
    Prerequisites: No
    Makes changes: No

    .EXAMPLE
    Full command: Start-MalwareProcess
    Description: Returns value to determine if real time protection is enabled
           
    .OUTPUTS
   Hello Team,

	Microsoft Antimalware Engine/Windows Defender has performed an update, which temporarily disabled Real-Time Protection. The update has completed and Real-Time Protection has been enabled and verified:
	------------------------------------
	Real-Time Protection Enabled: True
	------------------------------------

	Please feel free to update this ticket if you have any questions.

	Kind regards,

   OR
   	Real Time Protection disabled and provided information to troubleshoot issue.
   OR
   	Cannot locate powershell module
   OR
   	Provides ERR in private window if script has an error   
   
    .NOTES
    Minimum OS: 2012 
    Minimum PoSh: 4.0

    Version Table:
    Version :: Author             :: Live Date   :: JIRA     :: QC          :: Description
    -----------------------------------------------------------------------------------------------------------

#>

$Global:remediation = $true
$Global:osVersion = ([environment]::OSVersion.Version).Major

Function Get-RealTimeProtectionStatus{
    <#
    .SYNOPSIS
    Checks if the Real-Time protection is enabled/disabled
    .DESCRIPTION
    The Get-RealTimeProtectionStatus cmdlet checks if real-time protection returns either a $true for malware protection and $true for windows defender. 
    #>
    try
    {
        $path = 'C:\Program Files\Microsoft Security Client\MpProvider\MpProvider.psd1'
             
        if($Global:osVersion -gt '6'){
                $realtimeprotection = (Get-MpComputerStatus).RealTimeProtectionEnabled
                if ($realtimeprotection -eq $true){
                    $Global:rtcheckvalue = $true}
                else{$Global:rtcheckvalue = $false}
        }
        else{
            if ((test-path -Path $path) -eq 'True'){
                import-module $path
                $realtimeprotection = (Get-MProtComputerStatus).RealTimeProtectionEnabled
                    if ($realtimeprotection -eq $true){
                        $Global:rtcheckvalue = $true}
                    else{$Global:rtcheckvalue = $false}
            }else{
                return Get-TicketUpdate -updatevalue 4
            }
        }
    
    }
    catch
    {
        #Information to be added to private comment in ticket when unknown error occurs
        $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
        Write-Output "Script failed to run`n"
        Write-Output $ErrMsg
    }
}

#region Ticket update
Function Get-TicketUpdate {
<#
    .SYNOPSIS
    Returns Ticket update
    .DESCRIPTION
    The Get-TicketUpdate cmdlet returns public/private ticket update. There is a default update if value returned does not meet
    any of the required values.
#>
param(
    [int]$updatevalue
)
try {
    switch ($updatevalue) {
        1 { ("Hello Team,`n`nMicrosoft Antimalware Engine/Windows Defender performed an update, which temporarily disabled Real-Time Protection. Our Remediation " +
              "Engine has set and/or verified that Real-Time Protection is currently enabled:" +
              "`n------------------------------------`nReal-Time Protection Enabled: $($Global:rtcheckvalue)`n------------------------------------`n`nPlease feel free to update this ticket if you have any questions.`n")
            }
        2 { ("Hello Team,`n`nTicket automation should have remediated Real-Time Protection being disabled.`n"+
             "`n::Troubleshooting assistance::`n`n"+
             "`Windows 2012:`n"+
             "Real-Time Protection Status: (Get-MProtComputerStatus).RealTimeProtectionEnabled"+
             "`nReal-Time Protection Enable: Set-MProtPreference -DisableRealtimeMonitoring `$False" +
             "`n`nWindows 2016:`n"+
             "Real-Time Protection Status: (Get-MpComputerStatus).RealTimeProtectionEnabled"+
             "`nReal-Time Protection Enable: " +
             "Set-MpPreference -DisableRealtimeMonitoring `$False"+
             "`n`nPlease logon to the VM: $($env:COMPUTERNAME) and rectify accordingly.")
            }
        3 {  ("Hello Team,`n`nMicrosoft Antimalware Engine/Windows Defender has performed an update, which temporarily disabled Real-Time Protection. The update" +
             " has completed and Real-Time Protection has been enabled and verified:" +
             "`n------------------------------------`nReal-Time Protection Enabled: $($Global:rtcheckvalue)`n------------------------------------`n`nPlease feel free to update this ticket if you have any questions.`n")
            } 
        4 {  ("Cannot locate powershell module MpProvider.ps1 or script failed to execute")
            }
        default {"No return value for output was supplied to script, could not determine response"
            }
    }
}
    catch {
        $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
        Write-Output "Script failed to run`n"
        Write-Output $ErrMsg
}
}
#endregion
function Set-RealTimeEnable {
<#
    .SYNOPSIS
    Attempt to enable Real-Time protection
    .DESCRIPTION
    The Set-RealTimeEnable cmdlet sets value to enable protection
#>
    try {
        if($Global:rtcheckvalue -eq $true){ #if remediation is enabled then no need to set value
            Get-TicketUpdate 1}
        else{
                if($Global:osVersion -gt 6){
                    Set-MpPreference -DisableRealtimeMonitoring $False}
                else {
                    Set-MProtPreference -DisableRealtimeMonitoring $False}
                    Start-Sleep -Seconds 5
                    Get-RealTimeProtectionStatus #verifies that the remediation enabled the protection
                Set-Ticketupdate}        
    }
    catch {
        $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
        Write-Output "Script failed to run`n"
        Write-Output $ErrMsg
    }

}

function Set-TicketUpdate{
     try {
        if ($Global:rtcheckvalue -eq $true){ #double check results a delay maybe required
            return Get-TicketUpdate 3}
        else{
            return Get-TicketUpdate 2}
        }
     catch {
        $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
        Write-Output "Script failed to run`n"
        Write-Output $ErrMsg
        } 
    }


function Start-MalwareProcess{
    try {
        if($global:remediation -eq $false){
            Get-RealTimeProtectionStatus
            Set-Ticketupdate}
        else{
            Get-RealTimeProtectionStatus
            Set-RealTimeEnable}
    }
    catch {
        $ErrMsg = "Powershell exception :: Line# $($_.InvocationInfo.ScriptLineNumber) :: $($_.Exception.Message)"
        Write-Output "Script failed to run`n"
        Write-Output $ErrMsg
    }

}
Start-MalwareProcess